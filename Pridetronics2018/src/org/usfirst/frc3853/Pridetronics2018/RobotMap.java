// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3853.Pridetronics2018;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  public static SpeedController driveleftDriveMotor;
  public static SpeedController driverightDriveMotor;
  public static DifferentialDrive driverobotDrive;
  public static Encoder driveleftDriveEncoder;
  public static Encoder driverightDriveEncoder;
  public static SpeedController clawintakeMotor;
  public static SpeedController liftliftMotor;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  public static void init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveleftDriveMotor = new Spark(0);
    LiveWindow.addActuator("Drive", "leftDriveMotor", (Spark) driveleftDriveMotor);
    driveleftDriveMotor.setInverted(false);
    driverightDriveMotor = new Spark(1);
    LiveWindow.addActuator("Drive", "rightDriveMotor", (Spark) driverightDriveMotor);
    driverightDriveMotor.setInverted(false);
    driverobotDrive = new DifferentialDrive(driveleftDriveMotor, driverightDriveMotor);
    LiveWindow.addActuator("Drive", "robotDrive", driverobotDrive);
    driverobotDrive.setSafetyEnabled(true);
    driverobotDrive.setExpiration(0.1);
    driverobotDrive.setMaxOutput(1.0);

    driveleftDriveEncoder = new Encoder(5, 6, false, EncodingType.k4X);
    LiveWindow.addSensor("Drive", "leftDriveEncoder", driveleftDriveEncoder);
    driveleftDriveEncoder.setDistancePerPulse(0.14);
    driveleftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
    driverightDriveEncoder = new Encoder(7, 8, false, EncodingType.k4X);
    LiveWindow.addSensor("Drive", "rightDriveEncoder", driverightDriveEncoder);
    driverightDriveEncoder.setDistancePerPulse(0.14);
    driverightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
    clawintakeMotor = new Spark(3);
    LiveWindow.addActuator("Claw", "intakeMotor", (Spark) clawintakeMotor);
    clawintakeMotor.setInverted(false);
    liftliftMotor = new Spark(2);
    LiveWindow.addActuator("Lift", "liftMotor", (Spark) liftliftMotor);
    liftliftMotor.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }
}
